title: Chamber of Deputies Elections
new-page: true
tags: event
priority: -1
view-if: ((year = next_election_year and month >= next_election_month) or (year > next_election_year)) and not national_congress_seen and king_event = 1
on-arrival: {!
// resetting coalition stuff
Q.ldr_promise_failed = 0;
Q.ppi_promise_failed = 0;

Q.ppi_total_broken = 0;
Q.ldr_total_broken = 0;
Q.ul_total_broken = 0;

Q.liberal_aid_accepted = 0;
Q.liberal_budget_accepted = 0;
Q.liberal_crackdown_accepted = 0;
Q.liberal_foreign_accepted = 0;
Q.liberal_nationalisation_accepted = 0;
Q.liberal_reform_accepted = 0;

Q.catholic_charity_accepted = 0;
Q.catholic_education_accepted = 0;
Q.catholic_nationalisation_accepted = 0;
Q.catholic_papacy_accepted = 0;
Q.catholic_women_accepted = 0;

Q.coalition_dissent = 0;

Q.crackdown_far_left = 0;
Q.crackdown_far_right = 0;

// prevents insta dismissal
Q.king_dismissed_timer = 12;

Q.party_demands_timer = 6;

Q.ds_enemies = 0;
Q.ds_allies = 0;
Q.ldr_enemies = 0;
Q.ul_allies = 0;
Q.in_coalition = 0;
Q.southern_development = 0;

Q.left_wing_coalition_failed = 0;
Q.centre_left_coalition_failed = 0;
Q.socialist_catholic_coalition_failed = 0;

Q.in_coalition = 0;
Q.in_unstable_coalition = 0;
!}
on-departure: week_actions += 1; in_election = 0; next_election_year = next_election_year + 2; n_elections += 1; next_election_time = time + 24;
set-jump: post_election_1919

= Elections, [+ month : month +] [+ year +]

The Chamber of Deputies elections are to be held now.

- @election_algorithm: May we do our best...

@post_election_1919
on-arrival: {!
// set old results
// election threshold constitutional reform
// banning parties
var new_party_sum = 0;
var new_party_seating = 0;
var new_party_seating_disp = 0;
Q.party_banned = 0;
for (var party of Q.parties) {
    if (Q[party + '_banned']) {
        Q.party_banned = 1;
    }
}

for (var party of Q.parties) {
    Q['old_' + party + '_r'] = Q[party + '_r'];
    Q[party + '_r'] = Q[party + '_votes'];

    if (Q.party_banned == 1 && Q[party + '_banned']) {
        Q[party + '_r'] = 0;
        Q[party + '_seating'] = 0;
    }   
}

if (Q.party_banned == 1) {
    for (var party of Q.parties) {
        new_party_sum += Q[party + '_r'];
    }
}

// LIST CODE HERE

// Socialist List

// BN List

if (Q.bn_formed) {

    Q.old_bn_r = Q.bn_r;

    if (Q.ani_in_bn) {
        Q.bn_r += Q.other_r * 0.1;
        Q.bn_seating += Q.other_seating * 0.1;
        Q.bn_seating_disp += Q.other_seating_disp * 0.1;

        Q.other_r -= Q.other_r * 0.1;
        Q.other_seating -= Q.other_seating * 0.1;
        Q.other_seating_disp -= Q.other_seating_disp * 0.1;
    }

    if (Q.ul_in_bn) {
        Q.bn_r += Q.ul_r;
        Q.bn_seating += Q.ul_seating;
        Q.bn_seating_disp += Q.ul_seating_disp;

        Q.ul_r = 0;
        Q.ul_seating = 0;
        Q.ul_seating_disp = 0;
    }

    if (Q.pnf_in_bn) {
        Q.bn_r += Q.pnf_r;
        Q.bn_seating += Q.pnf_seating;
        Q.bn_seating_disp += Q.pnf_seating_disp

        Q.pnf_r = 0;
        Q.pnf_seating = 0;
        Q.pnf_seating_disp = 0;
    }
}

// Fascist List

if (Q.pnf_r >= 5 && Q.ds_leader == "Carnazza" && Q.ds_party && Q.pnf_in_bn == 0 && Q.prime_minister_party != Q.pnf_name) {
    Q.pnf_r += Q.ds_r;
    Q.pnf_seating += Q.ds_seating;
    Q.pnf_seating_disp += Q.ds_seating_disp;

    Q.ds_r = 0;
    Q.ds_seating = 0;
    Q.ds_seating_disp = 0;
}

if (Q.pnf_r >= 5 && Q.pll_formed && Q.pnf_in_bn == 0 && Q.prime_minister_party != Q.pnf_name) {
    Q.pnf_r += Q.pll_r;
    Q.pnf_seating += Q.pll_seating;
    Q.pnf_seating_disp += Q.pll_seating_disp;

    Q.pll_r = 0;
    Q.pll_seating = 0;
    Q.pll_seating_disp = 0;
}

// Others

if (Q.pnf_r < 5 && Q.prime_minister_party != Q.pnf_name) {
    Q.other_r += Q.pnf_r;
    Q.other_seating += Q.pnf_seating;
    Q.other_seating_disp += Q.pnf_seating_disp;

    Q.pnf_r = 0;
    Q.pnf_seating = 0;
    Q.pnf_seating_disp = 0;
}

// PSRI - DO NOT TOUCH

if (Q.psri_joint_pll) {
    Q.pll_r += Q.psri_r;
    Q.pll_seating += Q.psri_seating;
    Q.pll_seating_disp += Q.psri_seating_disp;

    Q.psri_r = 0;
    Q.psri_seating = 0;
    Q.psri_seating_disp = 0;
}

if (Q.psri_joint_pri) {
    Q.pri_r += Q.psri_r;
    Q.pri_seating += Q.psri_seating;
    Q.pri_seating_disp += Q.psri_seating_disp;

    Q.psri_r = 0;
    Q.psri_seating = 0;
    Q.psri_seating_disp = 0;
}

if (Q.psri_joint_psu) {
    Q.psu_r += Q.psri_r;
    Q.psu_seating += Q.psri_seating;
    Q.psu_seating_disp += Q.psri_seating_disp;

    Q.psri_r = 0;
    Q.psri_seating = 0;
    Q.psri_seating_disp = 0;
}

if (Q.psri_solo && Q.psri_r < 5) {
    Q.other_r += Q.psri_r;
    Q.other_seating += Q.psri_seating;
    Q.other_seating_disp += Q.psri_seating_disp;

    Q.psri_r = 0;
    Q.psri_seating = 0;
    Q.psri_seating_disp = 0;
}

// Economic Party - DO NOT TOUCH

if (Q.economic_right) {
    Q.pnf_r += Q.other_r * 0.1;
    Q.pnf_seating += Q.other_seating * 0.1;
    Q.pnf_seating_disp += Q.other_seating_disp * 0.1;

    Q.other_r -= Q.other_r * 0.1;
    Q.other_seating -= Q.other_seating * 0.1;
    Q.other_seating_disp -= Q.other_seating_disp * 0.1;
}

// National List & Anti-Fascist List - DO NOT TOUCH

if (Q.prime_minister_party == "PNF") {
    if (Q.anti_fas_ds) {
        Q.psi_r += Q.ds_r;
        Q.psi_seating += Q.ds_seating;
        Q.psi_seating_disp += Q.ds_seating_disp;

        Q.ds_r = 0;
        Q.ds_seating = 0;
        Q.ds_seating_disp = 0;
    } else {
        Q.pnf_r += Q.ds_r * 0.7;
        Q.pnf_seating += Q.ds_seating * 0.7;
        Q.pnf_seating_disp += Q.ds_seating_disp * 0.7;

        Q.other_r += Q.ds_r * 0.3;
        Q.other_seating += Q.ds_seating * 0.3;
        Q.other_seating_disp += Q.ds_seating_disp * 0.3;

        Q.ds_r = 0;
        Q.ds_seating = 0;
        Q.ds_seating_disp = 0;
    }

    if (Q.anti_fas_ldr) {
        Q.psi_r += Q.ldr_r * 0.7;
        Q.psi_seating += Q.ldr_seating * 0.7;
        Q.psi_seating_disp += Q.ldr_seating_disp * 0.7;

        Q.pnf_r += Q.ldr_r * 0.3;
        Q.pnf_seating += Q.ldr_seating * 0.3;
        Q.pnf_seating_disp += Q.ldr_seating_disp * 0.3;

        Q.ldr_r = 0;
        Q.ldr_seating = 0;
        Q.ldr_seating_disp = 0;
    } else {
        Q.pnf_r += Q.ldr_r * 0.9;
        Q.pnf_seating += Q.ldr_seating * 0.9;
        Q.pnf_seating_disp += Q.ldr_seating_disp * 0.9;

        Q.other_r += Q.ldr_r * 0.1;
        Q.other_seating += Q.ldr_seating * 0.1;
        Q.other_seating_disp += Q.ldr_seating_disp * 0.1;

        Q.ldr_r = 0;
        Q.ldr_seating = 0;
        Q.ldr_seating_disp = 0;
    }

    if (Q.anti_fas_pll) {
        Q.psi_r += Q.pll_r;
        Q.psi_seating += Q.pll_seating;
        Q.psi_seating_disp += Q.pll_seating_disp;

        Q.pll_r = 0;
        Q.pll_seating = 0;
        Q.pll_seating_disp = 0;
    } else {
        Q.other_r += Q.pll_r;
        Q.other_seating += Q.pll_seating;
        Q.other_seating_disp += Q.pll_seating_disp;

        Q.pll_r = 0;
        Q.pll_seating = 0;
        Q.pll_seating_disp = 0;
    }

    if (Q.anti_fas_psu) {
        Q.psi_r += Q.psu_r;
        Q.psi_seating += Q.psu_seating;
        Q.psi_seating_disp += Q.psu_seating_disp;

        Q.psu_r = 0;
        Q.psu_seating = 0;
        Q.psu_seating_disp = 0;
    } else {
        Q.other_r += Q.psu_r;
        Q.other_seating += Q.psu_seating;
        Q.other_seating_disp += Q.psu_seating_disp;

        Q.psu_r = 0;
        Q.psu_seating = 0;
        Q.psu_seating_disp = 0;
    }

    if (Q.anti_fas_ppi) {
        Q.psi_r += Q.ppi_r;
        Q.psi_seating += Q.ppi_seating;
        Q.psi_seating_disp += Q.ppi_seating_disp;

        Q.ppi_r = 0;
        Q.ppi_seating = 0;
        Q.ppi_seating_disp = 0;
    } else {
        Q.pnf_r += Q.ppi_r * 0.7;
        Q.pnf_seating += Q.ppi_seating * 0.7;
        Q.pnf_seating_disp += Q.ppi_seating_disp * 0.7;

        Q.other_r += Q.ppi_r * 0.3;
        Q.other_seating += Q.ppi_seating * 0.3;
        Q.other_seating_disp += Q.ppi_seating_disp * 0.3;
    }

    if (Q.anti_fas_pri) {
        Q.psi_r += Q.pri_r;
        Q.psi_seating += Q.pri_seating;
        Q.psi_seating_disp += Q.pri_seating_disp;

        Q.pri_r = 0;
        Q.pri_seating = 0;
        Q.pri_seating_disp = 0;
    } else {
        Q.pnf_r += Q.pri_r * 0.7;
        Q.pnf_seating += Q.pri_seating * 0.7;
        Q.pnf_seating_disp += Q.pri_seating_disp * 0.7;

        Q.other_r += Q.pri_r * 0.3;
        Q.other_seating += Q.pri_seating * 0.3;
        Q.other_seating_disp += Q.pri_seating_disp * 0.3;
    }

    if (Q.anti_fas_psri) {
        Q.psi_r += Q.psri_r;
        Q.psi_seating += Q.psri_seating;
        Q.psi_seating_disp += Q.psri_seating_disp;

        Q.psri_r = 0;
        Q.psri_seating = 0;
        Q.psri_seating_disp = 0;
    } else {
        Q.pnf_r += Q.psri_r * 0.7;
        Q.pnf_seating += Q.psri_seating * 0.7;
        Q.pnf_seating_disp += Q.psri_seating_disp * 0.7;

        Q.other_r += Q.psri_r * 0.3;
        Q.other_seating += Q.psri_seating * 0.3;
        Q.other_seating_disp += Q.psri_seating_disp * 0.3;
    }

    Q.pnf_r += Q.ul_r * 0.8;
    Q.pnf_seating += Q.ul_seating * 0.8;
    Q.pnf_seating_disp += Q.ul_seating_disp * 0.8;

    Q.other_r += Q.ul_r * 0.2;
    Q.other_seating += Q.ul_seating * 0.2;
    Q.other_seating_disp += Q.ul_seating_disp * 0.2;

    Q.ul_r = 0;
    Q.ul_seating = 0;
    Q.ul_seating_disp = 0;

    Q.pnf_r += Q.pcs_r;
    Q.pnf_seating += Q.pcs_seating;
    Q.pnf_seating_disp += Q.pcs_seating_disp;

    Q.pcs_r = 0;
    Q.pcs_seating = 0;
    Q.pcs_seating_disp = 0;
}

// BN CALCULATION!!!!!!
if (Q.bn_formed) {
    // if we use decimals, then we might want to truncate the numbers
    if (Q.use_decimals) {
        Q.bn_r_disp = Q.bn_r.toFixed(1);
    }  else {
            Q.bn_r_disp = Q.bn_r;
    }
    Q.change_bn_r = Q.bn_r - Q.old_bn_r;
    var sign = Q.change_bn_r > 0 
                ? '<img style ="height: 11px; width: 11px;" src="img/Increase2.png"> ' 
                : Q.change_bn_r < 0 
                    ? '<img style ="height: 11px; width: 11px;" src="img/Decrease2.png"> ' 
                    : '<img style ="height: 11px; width: 11px;" src="img/Steady2.png"> ';
    Q.change_bn_r = Math.abs(Q.change_bn_r);
    Q.str_change_bn = sign + parseFloat(Q.change_bn_r).toFixed(1);
}

// seating percentage

var total_available_seats = 0;

if (Q.year <= 1920) {
    total_available_seats = 508;
}
if (Q.year >= 1921) {
    total_available_seats = 535;
}

// Other Calculation
if (Q.party_banned == 0) {
    for (var party of Q.parties) {
        if (Q.use_decimals) {
            Q[party + '_r_disp'] = Q[party+'_r'].toFixed(1);
        } else {
            Q[party + '_r_disp'] = Q[party+'_r'];
        }
        Q['change_' + party + '_r'] = Q[party + '_r'] - Q['old_' + party + '_r'];
        var sign = Q['change_' + party + '_r'] > 0 
                    ? '<img style="height: 11px; width: 11px;" src="img/Increase2.png">' 
                    : Q['change_' + party + '_r'] < 0 
                        ? '<img style="height: 11px; width: 11px;" src="img/Decrease2.png">' 
                        : '<img style="height: 11px; width: 11px;" src="img/Steady2.png">';
        Q['change_' + party + '_r'] = Math.abs(Q['change_' + party + '_r']);
        Q['str_change_' + party] = sign + parseFloat(Q['change_' + party + '_r']).toFixed(1);
    }
}

if (Q.party_banned == 1) {
    for (var party of Q.parties) {
        if (Q[party + '_r'] > 0) {
            Q[party + '_r'] = Math.round(Q[party + '_r'] * 1000 / new_party_sum) / 10;
        }
        if (Q[party + '_seating'] > 0) {
            Q[party + '_seating'] = Math.round((Q[party + '_r'] / 100) * total_available_seats);
        }

        Q[party + '_r_disp'] = Q[party+'_r'].toFixed(1);

        Q['change_' + party + '_r'] = Q[party + '_r'] - Q['old_' + party + '_r'];
        var sign = Q['change_' + party + '_r'] > 0 
                    ? '<img style="height: 11px; width: 11px;" src="img/Increase2.png">' 
                    : Q['change_' + party + '_r'] < 0 
                        ? '<img style="height: 11px; width: 11px;" src="img/Decrease2.png">' 
                        : '<img style="height: 11px; width: 11px;" src="img/Steady2.png">';
        Q['change_' + party + '_r'] = Math.abs(Q['change_' + party + '_r']);
        Q['str_change_' + party] = sign + parseFloat(Q['change_' + party + '_r']).toFixed(1);
    }
}

if (Q.acerbo_law_passed) {
    // acerbo law

    var remaining_seats = 180;
    var party_majority = "";
    var party_majority_num = 0;

    // Find the party with at least 25% and the highest support
    for (party of Q.parties) {
        if (Q[party + '_r'] >= 25 && Q[party + '_r'] > party_majority_num) {
            party_majority = party;
            party_majority_num = Q[party + '_r'];
        }
    }

    if (party_majority_num >= 25) {
        var majority_seats = Math.floor((total_available_seats / 3) * 2); // 2/3 of 535
        var remaining_seats = total_available_seats - majority_seats;
        var remaining_votes = 100 - party_majority_num;

        // Assign majority party its seats
        Q[party_majority + '_seating'] = majority_seats;

        for (party of Q.parties) {
            if (party !== party_majority) {
                // Distribute the remaining seats proportionally
                var proportional_seats = (Q[party + '_r'] / remaining_votes) * remaining_seats;
                Q[party + '_seating'] = Math.round(proportional_seats);
            }
        }
    }
}

for (var party of Q.parties) {
    Q[party + '_seating_disp'] = (Q[party + '_seating']/total_available_seats)*100;
    Q[party + '_seating_disp'] = parseFloat(Q[party + '_seating_disp'].toFixed(1));
}


Q.bn_seating_disp = (Q.bn_seating/total_available_seats)*100;
Q.bn_seating_disp = parseFloat(Q.bn_seating_disp.toFixed(1));

if (Q.abstentionist_psi) {
    Q.vacant_seating = Q.psi_seating;
    Q.vacant_seating_disp = Q.psi_seating_disp;
    Q.psi_seating = 0;
    Q.psi_seating_disp = 0;

    if (Q.vacant_seating_disp >= 35) {
        Q.revolutionary_fervour += 7;
        Q.revolutionary_exhaustion -= 0.01;
    }
}

// The largest party can only be the PNF or the PSI.
Q.largest_party = Q.psi_name;
if (Q.pnf_seating_disp >= Q.psi_seating_disp && Q.pnf_seating_disp >= Q.psri_seating_disp && Q.pnf_seating_disp >= Q.pcdi_seating_disp) {
    Q.largest_party = 'PNF';
}

// coalitions
Q.national_coalition_r = Q.ul_seating_disp + parseFloat((Q.other_seating_disp)*0.2);
Q.new_grand_coalition_r = Q.psi_seating_disp + Q.psri_seating_disp;

if (Q.psu_formed) {
    Q.new_grand_coalition_r += Q.psu_seating_disp;
}

if (Q.pll_formed) {
    Q.new_grand_coalition_r += Q.pll_seating_disp;
}

if (Q.pri_prominent) {
    Q.new_grand_coalition_r += Q.pri_seating_disp;
} else {
    Q.new_grand_coalition_r += parseFloat(Q.other_seating_disp*0.8);
}

if (Q.national_coalition_ldr) {
    Q.national_coalition_r += Q.ldr_seating_disp;
} else {
    Q.new_grand_coalition_r += Q.ldr_seating_disp;
}

if (Q.national_coalition_ds) {
    Q.national_coalition_r += Q.ds_seating_disp;
} else {
    Q.new_grand_coalition_r += Q.ds_seating_disp;
}

if (Q.national_coalition_ppi) {
    Q.national_coalition_r += Q.ppi_seating_disp;
} else {
    Q.new_grand_coalition_r += Q.ppi_seating_disp;
}

if (Q.psri_r < 2 && Q.psri_solo) {
    Q.psri_collapse = 1;
} else {
    Q.psri_collapse = 0;
}

Q.national_coalition_r = Q.national_coalition_r.toFixed(1);
Q.new_grand_coalition_r = Q.new_grand_coalition_r.toFixed(1);

// reset coalitions
Q.psi_majority = 0;
Q.centre_left_coalition = 0;
Q.left_wing_coalition = 0;
Q.socialist_catholic_coalition = 0;
Q.grand_coalition = 0;
Q.centre_right_coalition = 0;
Q.anti_socialist_coalition = 0;

Q.pcdi_in_government = 0;
Q.psi_in_government = 0;
Q.psu_in_government = 0;
Q.ppi_in_government = 0;
Q.ldr_in_government = 0;
Q.ds_in_government = 0;
Q.ul_in_government = 0;
Q.psri_in_government = 0;
Q.pnf_in_government = 0; 

// based on starting coalition
Q.foreign_minister = 'Sonnino';
Q.foreign_minister_party = Q.ul_name;
Q.interior_minister = 'Orlando';
Q.interior_minister_party = Q.ldr_name;
Q.justice_minister = 'Sacchi';
Q.justice_minister_party = Q.ds_name;
Q.labour_minister = 'Ferraris';
Q.labour_minister_party = Q.ul_name;
Q.public_works_minister = 'Dari';
Q.public_works_minister_party = Q.ul_name;
Q.treasury_minister = 'Nitti';
Q.treasury_minister_party = Q.ds_name;
Q.finance_minister = 'Meda';
Q.finance_minister_party = 'PPI';
Q.agriculture_minister = 'Miliani';
Q.agriculture_minister_party = Q.ldr_name;
Q.public_education_minister = 'Berenini';
Q.public_education_minister_party = 'PSRI';

Q.leverage = Q.psi_seating_disp;

var election_result = {'date': new Date(Q.year, Q.month - 1)};
for (var party of Q.parties) {
    election_result[party] = Q[party + '_seating_disp'];
}
Q.election_records.push(election_result);
!}
on-departure: fasci_urgency += 1 if (fasci_urgency <= 2 and pnf_seating_disp >= 15)
on-display: {!
data = []

if (Q.pcdi_formed && Q.pcdi_seating_disp) {
    data.push({
        "id": "pcdi",
        "legend": "PCD'I",
        "name": "PCd'I",
        "seats": Math.round(Q.pcdi_seating),
    });
}

data.push({
    "id": "psi",
    "legend": "PSI",
    "name": "PSI",
    "seats": Math.round(Q.psi_seating),
});

if (Q.psu_formed && Q.psu_seating_disp) {
    data.push({
        "id": "psu",
        "legend": "PSU",
        "name": "PSU",
        "seats": Math.round(Q.psu_seating),
    });
}

if (Q.psri_collapse != 1) {
    data.push({
            "id": "psri",
            "legend": "PSRI",
            "name": "PSRI",
            "seats": Math.round(Q.psri_seating),
    });
}

if (Q.pll_formed && Q.pll_seating_disp) {
    data.push({
        "id": "pll",
        "legend": "PLL",
        "name": "PLL",
        "seats": Math.round(Q.pll_seating),
    });
}

if (Q.pri_prominent && Q.pri_seating_disp) {
    data.push({
        "id": "pri",
        "legend": "PRI",
        "name": "PRI",
        "seats": Math.round(Q.pri_seating),
    });
}

if (Q.ds_seating_disp) {
    data.push({
        "id": "ds",
        "legend": "DS",
        "name": Q.ds_name,
        "seats": Math.round(Q.ds_seating),
    });
}

data.push({
        "id": "ppi",
        "legend": "PPI",
        "name": "PPI",
        "seats": Math.round(Q.ppi_seating),
});

    data.push({
        "id": "ldr",
        "legend": "LDR",
        "name": Q.ldr_name,
        "seats": Math.round(Q.ldr_seating),
    });

if (Q.bn_formed === 1 && Q.bn_seating_disp) {
    data.push({
        "id": "bn",
        "legend": "BN",
        "name": "BN",
        "seats": Math.round(Q.bn_seating), 
    })
}

if (Q.ul_in_bn != 1 && Q.ul_seating_disp) {
    data.push({
        "id": "ul",
        "legend": "UL",
        "name": Q.ul_name,
        "seats": Math.round(Q.ul_seating),
    });
}

if (Q.pcs_formed) {
    data.push({
        "id": "pcs",
        "legend": "PCS",
        "name": "PCS",
        "seats": Math.round(Q.pcs_seating),
    });
}

if (Q.pnf_in_bn != 1 && Q.pnf_seating_disp) {
    data.push({
        "id": "pnf",
        "legend": "PNF",
        "name": Q.pnf_name,
        "seats": Math.round(Q.pnf_seating),
    });
}

data.push({
        "id": "other",
        "legend": "Other",
        "name": "Other",
        "seats": Math.round(Q.other_seating),
});

if (window && d3) {
    var width = 500; 
    var height = 500;
    var screenWidth = document.getElementById('content').offsetWidth;
    if (screenWidth < width - 50) {
        width = screenWidth - 50; 
        height = width;
        document.getElementById("chamber").style.height = screenWidth/2 + "px";
    } 

    var parliament = d3.parliament();
    parliament.width(width).height(height).innerRadiusCoef(0.4);
    parliament.enter.fromCenter(true).smallToBig(true);
    parliament.exit.toCenter(false).bigToSmall(true);
    d3.select("#chamber").datum(data).call(parliament);
}
!}
go-to: coalition_menu

= Election results

{!<svg id="chamber" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!}
{!<tr><td>Parties/Groups</td><td>Vote Share</td><td>% Change</td><td>Seats Given</td><td>% Seats</td></tr>!}
{!<tr><td><div class="box" style='background-color:#ED2855; outline: 2px; outline-style: solid;'> </div>!} Socialist List: {!</td><td>!} **[+ psi_r_disp +]%** {!</td><td>!} **[+ str_change_psi +]%** {!</td><td>!} **[+ psi_seating +]** {!</td><td>!} **[+ psi_seating_disp +]%** {!</td></tr>!}

{!<tr><td>!} **-[+ psi_full_name +]** {!</td></tr>!} 

[? if pcdi_formed : {!<tr><td><div class="box" style='background-color:#C72F35'> </div>!} Communist List: {!</td><td>!} [+ pcdi_r_disp +]% {!</td><td>!} [+ str_change_pcdi +]% {!</td><td>!} [+ pcdi_seating +] {!</td><td>!} [+ pcdi_seating_disp +]% {!</td></tr>!} ?]

[? if pcdi_formed : {!<tr><td>!} -Communist Party of Italy {!</td></tr>!} ?]

[? if psu_formed : {!<tr><td><div class="box" style='background-color:#E35A5A'> </div>!} Socialist Unity List: {!</td><td>!} [+ psu_r_disp +]% {!</td><td>!} [+ str_change_psu +]% {!</td><td>!} [+ psu_seating +] {!</td><td>!} [+ psu_seating_disp +]% {!</td></tr>!} ?]

[? if psu_formed : {!<tr><td>!} -Unitary Socialist Party {!</td></tr>!} ?]

[? if psu_formed and psri_joint_psu : {!<tr><td>!} -Italian Reformist Socialist Party {!</td></tr>!} ?]

[? if pll_formed : {!<tr><td><div class="box" style='background-color:#FFD1D9'> </div>!} Liberal-Socialist List: {!</td><td>!} [+ pll_r_disp +]% {!</td><td>!} [+ str_change_pll +]% {!</td><td>!} [+ pll_seating +] {!</td><td>!} [+ pll_seating_disp +]% {!</td></tr>!} ?]

[? if pll_formed : {!<tr><td>!} -Liberal Workers' Party {!</td></tr>!} ?]

[? if (psri_stable or (psri_solo and psri_r >= 5)) : {!<tr><td><div class="box" style='background-color:#FFC0CB'> </div>!} Reformist Socialist List: {!</td><td>!} [+ psri_r_disp +]% {!</td><td>!} [+ str_change_psri +]% {!</td><td>!} [+ psri_seating +] {!</td><td>!} [+ psri_seating_disp +]% {!</td></tr>!} ?]

[? if (psri_stable or (psri_solo and psri_r >= 5)) : {!<tr><td>!} -Italian Reformist Socialist Party {!</td></tr>!} ?]

[? if pri_prominent : {!<tr><td><div class="box" style='background-color:#3CB371'> </div>!} Republican List: {!</td><td>!} [+ pri_r_disp +]% {!</td><td>!} [+ str_change_pri +]% {!</td><td>!} [+ pri_seating +] {!</td><td>!} [+ pri_seating_disp +]% {!</td></tr>!} ?]

[? if pri_prominent : {!<tr><td>!} -Italian Republican Party {!</td></tr>!} ?]

[? if pri_prominent and psri_joint_pri : {!<tr><td>!} -Italian Reformist Socialist Party {!</td></tr>!} ?]

[? if (ds_list and not view_full) or ((ds_party and ds_leader = "Colonna") or (ds_leader = "Carnazza" and ds_party and (pnf_r < 5)) or (ds_party and ds_leader = "Giuffrida" and not ds_joint)) : {!<tr><td><div class="box" style='background-color:#1E99C5'> </div>!} Democratic List: {!</td><td>!} [+ ds_r_disp +]% {!</td><td>!} [+ str_change_ds +]% {!</td><td>!} [+ ds_seating +] {!</td><td>!} [+ ds_seating_disp +]% {!</td></tr>!} ?]

[? if (ds_list and not view_full) or ((ds_party and ds_leader = "Colonna") or (ds_leader = "Carnazza" and ds_party and (pnf_r < 5)) or (ds_party and ds_leader = "Giuffrida" and not ds_joint)) : {!<tr><td>!} -Italian Social Democratic Party {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#87CEFA'> </div>!} Catholic List: {!</td><td>!} [+ ppi_r_disp +]% {!</td><td>!} [+ str_change_ppi +]% {!</td><td>!} [+ ppi_seating +] {!</td><td>!} [+ ppi_seating_disp +]% {!</td></tr>!}

{!<tr><td>!} -Italian People's Party {!</td></tr>!}

[? if (ldr_party or ldr_list) : {!<tr><td><div class="box" style='background-color:#FFD700'> </div>!} Liberals, Democrats and Radicals: {!</td><td>!} [+ ldr_r +]% {!</td><td>!} [+ str_change_ldr +]% {!</td><td>!} [+ ldr_seating +] {!</td><td>!} [+ ldr_seating_disp +]% {!</td></tr>!} ?]

[? if ldr_party or (ldr_list and not view_full) : {!<tr><td>!} -Italian Democratic Liberal Party {!</td></tr>!} ?]

[? if not ul_in_bn : {!<tr><td><div class="box" style='background-color:#0047AB'> </div>!} Liberal List: {!</td><td>!} [+ ul_r +]% {!</td><td>!} [+ str_change_ul +]% {!</td><td>!} [+ ul_seating +] {!</td><td>!} [+ ul_seating_disp +]% {!</td></tr>!} ?]

[? if not ul_in_bn : {!<tr><td>!} -Italian Liberal Party {!</td></tr>!} ?]

[? if bn_formed : {!<tr><td><div class="box" style='background-color:#0047AB'> </div>!} National Bloc: {!</td><td>!} [+ bn_r +]% {!</td><td>!} [+ str_change_bn +]% {!</td><td>!} [+ bn_seating +] {!</td><td>!} [+ bn_seating_disp +]% {!</td></tr>!} ?]

[? if ul_in_bn : {!<tr><td>!} -Italian Liberal Party {!</td></tr>!} ?]

[? if ani_in_bn : {!<tr><td>!} -Italian Nationalist Association {!</td></tr>!} ?]

[? if pnf_in_bn : {!<tr><td>!} -National Fascist Party {!</td></tr>!} ?]

[? if pcs_formed and pnf_r < 5 : {!<tr><td><div class="box" style='background-color:#656573'> </div>!} National Conservative List: {!</td><td>!} [+ pcs_r_disp +]% {!</td><td>!} [+ str_change_pcs +]% {!</td><td>!} [+ pcs_seating +] {!</td><td>!} [+ pcs_seating_disp +]% {!</td></tr>!} ?]

[? if pcs_formed and pnf_r < 5 : {!<tr><td>!} -Christian Social Party {!</td></tr>!} ?]

[? if not pnf_in_bn and (pnf_r >= 5) and not pnf_banned: {!<tr><td><div class="box" style='background-color:#000000'> </div>!} [? if not pnf_in_power : Fascist List ?][? if pnf_in_power : National List ?]: {!</td><td>!} [+ pnf_r_disp +]% {!</td><td>!} [+ str_change_pnf +]% {!</td><td>!} [+ pnf_seating +] {!</td><td>!} [+ pnf_seating_disp +]% {!</td></tr>!} ?]

[? if not pnf_in_bn and (pnf_r >= 5) and not pnf_banned: {!<tr><td>!} -[+ pnf_full_name +] {!</td></tr>!} ?]

[? if ds_leader = "Carnazza" and ds_party and (pnf_r >= 5) : {!<tr><td>!} -Italian Social Democratic Party {!</td></tr>!} ?]

[? if pcs_formed and (pnf_r >= 5) : {!<tr><td>!} -Christian Social Party {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div>!} Others: {!</td><td>!} [+ other_r_disp +]% {!</td><td>!} [+ str_change_other +]% {!</td><td>!} [+ other_seating +] {!</td><td>!} [+ other_seating_disp +]% {!</td></tr>!}

[? if not pri_prominent : {!<tr><td>!} -Italian Republican Party {!</td></tr>!} ?]

[? if not economic_right : {!<tr><td>!} -Economic & Agrarian Party {!</td></tr>!} ?]

[? if pnf_r < 5 and not pnf_in_bn and not pnf_banned : {!<tr><td>!} -[+ pnf_full_name +] {!</td></tr>!} ?]

[? if psri_solo and psri_r < 5 : {!<tr><td>!} -Italian Reformist Socialist Party {!</td></tr>!} ?]

[? if abstentionist_psi : {!<tr><td><div class="box" style='background-color:#FFFFFF'> </div>!} Vacant: {!</td><td>!} N/A {!</td><td>!} N/A {!</td><td>!} [+ vacant_seating +] {!</td><td>!} [+ vacant_seating_disp +]% {!</td></tr>!} ?]
{!</table>!}

**Potential Coalitions:**

New Grand Coalition (PSI + PSRI [? if psu_formed : + PSU ?] [? if pll_formed : + PLL ?] [? if pri_prominent: + PRI ?] [? if not national_coalition_ppi : + PPI ?] [? if not national_coalition_ldr : + [+ ldr_name +] ?] [? if not national_coalition_ds : + [+ ds_name +] ?]): [+ new_grand_coalition_r +]%

National Coalition ([+ ul_name +] [? if national_coalition_ppi : + PPI ?] [? if national_coalition_ldr : + [+ ldr_name +] ?] [? if national_coalition_ds : + [+ ds_name +] ?] + Others): [+ national_coalition_r +]%

There are some potential coalition arrangements.

@coalition_menu
on-arrival: {!
Q.psi_majority = 0;
Q.in_coalition = 0;
Q.in_unstable_coalition = 0;
Q.centre_left_coalition = 0;
Q.left_wing_coalition = 0;
Q.socialist_catholic_coalition = 0;
Q.grand_coalition = 0;
Q.centre_right_coalition = 0;
Q.anti_socialist_coalition = 0;

!}

- @natcol_coalition
- @new_grand_coalition
- @no_majority: There is no clear majority.

@no_majority
go-to: natcol_coalition
view-if: new_grand_coalition_r < 50 and national_coalition_r < 50

There is no workable path to a clear majority by either coalition. Unfortunately for us, the King merely uses his constitutional powers to appoint [+ prime_minister +] and the Cabinet back to their positions, their newfound results and coalition seating size granting them legitimacy.

@natcol_coalition
title: National Coalition
subtitle: National Coalition: [+ national_coalition_r +]
view-if: national_coalition_r >= 50
on-arrival: {!
Q.royal_coup = 1;
!}

Our worst fears have come true. The National Coalition have managed to gain enough of a majority to form a sitting government.

What now?

- @civil_war: We cannot wait any longer. Mobilise the Red Guards!
- @nothing: Bide our time further.

@nothing
subtitle: This will end the game.

[+ prime_minister +] acts fast, as the PSI and other left-wing parties are continously harassed by the Government. A false-flag blamed on us allows the Interior Ministry to outlaw our party, consolidating right-wing influence over the country for the forseeable future.

Italy is lost.

- @game_over: Game over.

@new_grand_coalition
title: Form a 'New Grand Coalition', led by the Socialists.
subtitle: PSI + PSRI [? if psu_formed : + PSU ?] [? if pll_formed : + PLL ?] [? if pri_prominent: + PRI ?] [? if not national_coalition_ppi : + PPI ?] [? if not national_coalition_ldr : + [+ ldr_name +] ?] [? if not national_coalition_ds : + [+ ds_name +] ?]: [+ new_grand_coalition_r +]%
choose-if: national_coalition_r >= 50
unavailable-subtitle: PSI + PSRI [? if psu_formed : + PSU ?] [? if pri_prominent: + PRI ?] [? if not national_coalition_ppi : + PPI ?] [? if not national_coalition_ldr : + [+ ldr_name +] ?] [? if not national_coalition_ds : + [+ ds_name +] ?]: [+ new_grand_coalition_r +]%
on-arrival: {!
Q.leverage = Q.leverage;
Q.psi_in_government = 1;
Q.psri_in_government = 1;
Q.in_coalition = 1;

if (Q.pri_prominent == 1) {
    Q.pri_in_government = 1;
}

if (Q.national_coalition_ds != 1) {
    Q.ds_in_government = 1;
}

if (Q.national_coalition_ldr != 1) {
    Q.ldr_in_government = 1
}

if (Q.national_coalition_ppi != 1) {
    Q.ppi_in_government = 1;
}

if (Q.psu_formed == 1) {
    Q.psu_in_government = 1;
}
if (Q.ds_in_government == 1) {
    Q.foreign_minister_party = Q.ds_name; 
} else {
    Q.foreign_minister_party = "PSRI"; 
}
if (Q.psu_coalitioning == 1) {
    Q.interior_minister_party = "PSU";
} else {
    Q.interior_minister_party = "PSRI"; 
}
Q.justice_minister_party = "PSRI"; 
Q.labour_minister_party = "PSRI"; 
Q.finance_minister_party = "PSRI";
if (Q.ds_allies == 1) {
    Q.treasury_minister_party = Q.ds_name; 
} else {
    Q.treasury_minister_party = "PSRI"; 
}
Q.treasury_minister_party = "PSRI"; 
Q.agriculture_minister_party = "PSRI"; 
if (Q.pri_allies == 1) {
    Q.public_education_minister_party = "PRI"; 
} else {
    Q.public_education_minister_party = "PSRI"; 
}
Q.public_works_minister_party = "PSRI";
!}
achievement: sinistra_ascendente

Our negotiations with our coalition allies goes smoothly, and we form a stable coalition.

Who should we select to be Prime Minister?

- @turati
- @bissolati
- @bonomi
- @orlando
- @gasperi

@turati
title: Filippo Turati for Prime Minister
subtitle: Turati leads the reformist wing, and is an acceptable candidate for Prime Minister.
choose-if: reformists_defect = 0
unavailable-subtitle: Turati is no longer a member of the [+ psi_name +].
on-arrival: psi_in_government = 1; prime_minister = "Turati"; prime_minister_party = psi_name;
go-to: ministries

Filippo Turati's appointment as Prime Minister is approved by all our potential allies.

@bissolati
title: Ivanoe Bonomi for Prime Minister
view-if: not bissolati_dead
subtitle: Bissolati is a prominent leader of the PSRI, formerly affiliated with the [+ psi_name +].
on-arrival: psi_in_government = 1; prime_minister = "Bissolati"; prime_minister_party = "PSRI"; leverage += 5; maximalist_dissent += 2; communist_dissent += 5;
go-to: ministries

This is highly unexpected, but Bissolati's PSRI roots, as well as his committment to socialism, leaves little grumbling from our party.

@bonomi
title: Ivanoe Bonomi for Prime Minister
view-if: bissolati_dead
subtitle: Bonomi is a prominent leader of the PSRI, formerly affiliated with the [+ psi_name +].
on-arrival: psi_in_government = 1; prime_minister = "Bonomi"; prime_minister_party = "PSRI"; leverage += 5; maximalist_dissent += 4; communist_dissent += 7;
go-to: ministries

This is highly unexpected, but Bonomi's PSRI roots leaves merely some grumbling from our party.

@orlando
title: Let the [+ ldr_name +] have their Prime Minister. This will improve our leverage.
view-if: not national_coalition_ldr
subtitle: Vittorio Emanuele Orlando will be reappointed Prime Minister. This is unexpected and will cause internal dissent, but may give us a better position in negotiating for other cabinet positions.
on-arrival: reformist_dissent += 5; maximalist_dissent += 5; communist_dissent += 10; ldr_relation += 10; ds_relation += 5; prime_minister = "Orlando"; prime_minister_party = ldr_name; psi_in_government = 1; leverage += 10
go-to: ministries

@gasperi
title: Let the People's Party have their Prime Minister. This will improve over leverage.
view-if: not national_coalition_ppi
subtitle: Alcide De Gasperi will be appointed Prime Minister. This is unexpected and will cause internal dissent, but may give us a better position in negotiating for other cabinet positions.
on-arrival: reformist_dissent += 5; maximalist_dissent += 5; communist_dissent += 10; ppi_relation += 10; prime_minister = "De Gasperi"; prime_minister_party = "PPI"; psi_in_government = 1; leverage += 5
go-to: ministries

This is highly unexpected, and many in the centre and even the reformists of our party are criticizing this decision.

@ministries

We can pick from any number of ministries. Controlling a ministry allows us to directly effect policy in that area.

- #mins_1919
- #drop_mins_1919